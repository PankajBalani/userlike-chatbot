// Generated by CoffeeScript 1.6.2
(function() {
  var AskEmail, AskName, Client, FSM, Forward, Init, OfferHelp, ProcessAnswer, SetEmail, SetName, State, args, client, sessions, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Client = require('node-xmpp-client');

  FSM = (function() {
    function FSM(from) {
      this.from = from;
      this.state = new Init(this);
    }

    FSM.prototype.next = function(state, data) {
      console.log("next:  " + this.state.constructor.name + " -> " + state.name);
      this.state = new state(this);
      return this.state.enter(data);
    };

    FSM.prototype.event = function(name, data) {
      if ((this.state[name] != null) && typeof this.state[name] === 'function') {
        console.log("event: Event " + this.state.constructor.name + ":" + name + " data=" + data);
        return this.state[name](data);
      }
    };

    return FSM;

  })();

  State = (function() {
    function State(fsm) {
      this.fsm = fsm;
    }

    State.prototype.enter = function() {};

    State.prototype.send = function(message) {
      var stanza;

      stanza = new Client.Stanza('message', {
        to: this.fsm.from,
        type: "chat",
        level: "chat"
      }).c('body').t(message);
      return client.send(stanza);
    };

    return State;

  })();

  Init = (function(_super) {
    __extends(Init, _super);

    function Init() {
      _ref = Init.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return Init;

  })(State);

  AskName = (function(_super) {
    __extends(AskName, _super);

    function AskName() {
      _ref1 = AskName.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    AskName.prototype.message = function() {
      this.fsm.event("send", "May I ask your name?");
      return this.fsm.next(SetName);
    };

    return AskName;

  })(State);

  SetName = (function(_super) {
    __extends(SetName, _super);

    function SetName() {
      _ref2 = SetName.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    SetName.prototype.message = function(message) {
      this.fsm.event("send", "$name " + message);
      return this.fsm.next(AskEmail);
    };

    return SetName;

  })(State);

  AskEmail = (function(_super) {
    __extends(AskEmail, _super);

    function AskEmail() {
      _ref3 = AskEmail.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    AskEmail.prototype.enter = function() {
      this.fsm.event("send", "May I ask your email?");
      return this.fsm.next(SetEmail);
    };

    return AskEmail;

  })(State);

  SetEmail = (function(_super) {
    __extends(SetEmail, _super);

    function SetEmail() {
      _ref4 = SetEmail.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    SetEmail.prototype.message = function(message) {
      this.fsm.event("send", "$email " + message);
      return this.fsm.next(OfferHelp);
    };

    return SetEmail;

  })(State);

  OfferHelp = (function(_super) {
    __extends(OfferHelp, _super);

    function OfferHelp() {
      _ref5 = OfferHelp.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    OfferHelp.prototype.enter = function() {
      this.fsm.event("send", "Do you want to talk to an Agent?");
      return this.fsm.next(ProcessAnswer);
    };

    return OfferHelp;

  })(State);

  ProcessAnswer = (function(_super) {
    __extends(ProcessAnswer, _super);

    function ProcessAnswer() {
      _ref6 = ProcessAnswer.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    ProcessAnswer.prototype.message = function(message) {
      if (message === "yes") {
        this.fsm.event("send", "Ok i will forward you");
        return this.fsm.next(Forward);
      } else if (message === "no") {
        this.fsm.event("send", "Bye bye");
        return this.fsm.event("send", "$quit");
      } else {
        return this.fsm.event("send", "I didn't understand that");
      }
    };

    return ProcessAnswer;

  })(State);

  Forward = (function(_super) {
    __extends(Forward, _super);

    function Forward() {
      _ref7 = Forward.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    Forward.prototype.enter = function() {
      return this.fsm.event("send", "$forward david");
    };

    return Forward;

  })(State);

  args = process.argv.slice(2);

  sessions = {};

  client = new Client({
    jid: args[0],
    password: args[1],
    host: args[2] || 'www.userlike.com'
  });

  client.on('online', function() {
    return console.log('Bot is online');
  });

  client.on('error', function(e) {
    return console.error(e);
  });

  client.on('stanza', function(stanza) {
    var body, from, fsm;

    if (stanza.is('message') && stanza.attrs.type !== 'error' && stanza.attrs.level === "chat") {
      from = stanza.attrs.from;
      body = stanza.getChildText('body');
      if (!(from in sessions)) {
        fsm = new FSM(from);
        sessions[from] = fsm;
        fsm.next(AskName);
      }
      return sessions[from].event("message", body);
    }
  });

}).call(this);
